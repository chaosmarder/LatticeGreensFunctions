# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _LatticeGreensFunctions
else:
    import _LatticeGreensFunctions

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class INPUT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    IsF = property(_LatticeGreensFunctions.INPUT_IsF_get, _LatticeGreensFunctions.INPUT_IsF_set)
    prec = property(_LatticeGreensFunctions.INPUT_prec_get, _LatticeGreensFunctions.INPUT_prec_set)
    ymax = property(_LatticeGreensFunctions.INPUT_ymax_get, _LatticeGreensFunctions.INPUT_ymax_set)
    NT = property(_LatticeGreensFunctions.INPUT_NT_get, _LatticeGreensFunctions.INPUT_NT_set)
    f = property(_LatticeGreensFunctions.INPUT_f_get, _LatticeGreensFunctions.INPUT_f_set)
    er = property(_LatticeGreensFunctions.INPUT_er_get, _LatticeGreensFunctions.INPUT_er_set)
    ei = property(_LatticeGreensFunctions.INPUT_ei_get, _LatticeGreensFunctions.INPUT_ei_set)

    def __init__(self):
        _LatticeGreensFunctions.INPUT_swiginit(self, _LatticeGreensFunctions.new_INPUT())
    __swig_destroy__ = _LatticeGreensFunctions.delete_INPUT

# Register INPUT in _LatticeGreensFunctions:
_LatticeGreensFunctions.INPUT_swigregister(INPUT)

class OUTPUT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Gr = property(_LatticeGreensFunctions.OUTPUT_Gr_get, _LatticeGreensFunctions.OUTPUT_Gr_set)
    Gi = property(_LatticeGreensFunctions.OUTPUT_Gi_get, _LatticeGreensFunctions.OUTPUT_Gi_set)
    GFr = property(_LatticeGreensFunctions.OUTPUT_GFr_get, _LatticeGreensFunctions.OUTPUT_GFr_set)
    GFi = property(_LatticeGreensFunctions.OUTPUT_GFi_get, _LatticeGreensFunctions.OUTPUT_GFi_set)
    nxlist = property(_LatticeGreensFunctions.OUTPUT_nxlist_get, _LatticeGreensFunctions.OUTPUT_nxlist_set)
    nylist = property(_LatticeGreensFunctions.OUTPUT_nylist_get, _LatticeGreensFunctions.OUTPUT_nylist_set)
    Gr_d = property(_LatticeGreensFunctions.OUTPUT_Gr_d_get, _LatticeGreensFunctions.OUTPUT_Gr_d_set)
    Gi_d = property(_LatticeGreensFunctions.OUTPUT_Gi_d_get, _LatticeGreensFunctions.OUTPUT_Gi_d_set)

    def __init__(self):
        _LatticeGreensFunctions.OUTPUT_swiginit(self, _LatticeGreensFunctions.new_OUTPUT())
    __swig_destroy__ = _LatticeGreensFunctions.delete_OUTPUT

# Register OUTPUT in _LatticeGreensFunctions:
_LatticeGreensFunctions.OUTPUT_swigregister(OUTPUT)


def G0(GP, GV):
    return _LatticeGreensFunctions.G0(GP, GV)


